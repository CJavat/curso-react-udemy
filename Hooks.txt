HOOKS APRENDIDOS:

UseState: Sirve para guardar los cambios en la variable.
Sintaxis: const [dato, setDato] = useState('inicializacion');

UseEffect: Sirve para detectar cuando hay un cambio en la pagina o para ejecutar algo las veces que quieras
Sintaxis: useEffect(() => {
            Codigo a ejecutar.
          }, [Las veces que se va a ejecutar o cuando haya algun cambio en esa variable]);

UseParams: Para obtener los parametros que son enviados desde las rutas.
Sintaxis: variable = useParams();
Para poner parametros por defecto: const [var1 = "parametroPorDefecto1", var2 = "parametroPorDefecto2"] = useParams();

UseNavigate: Sirve para redireccionarte a otras rutas.
Sintaxis: const variableURL = useNavigate(); variableURL("/ruta1/subruta/subsubruta");

useRef: Se crea una referencia para que sea más fácil acceder a los elementos y poder sacarles su valor.
Sintaxis: const miReferencia = useRef();
Asignacion de la referencia: <input ref={miReferencia}>
Y ya con esa referencia se le puede hacer lo que quieras.

memo: Sirve para que el componente no se este cargando constantemente. solo cuando hay un cambio se va a actualizar/renderizar.
Sintaxis: memo(); // ira al principio despues del nombre del componente. Ejemplo: const componente = memo(...);

useMemo: Sirve para que no cargue de nuevo todo lo del componente, sino que solo vuelve a cargar lo que haya sido actualizado.
Sintaxis: const memoVariable = useMemo(() => variosDatos(contador), [contador]);
// Se crea la variable de memo. primero es la variable a la que se le va a memorizar para que no se recargue cuando hay cambios que no sea a el.
// Luego, entre [] se le pone cuando se va a ejecutar (cuando contador tenga un cambio se va a ejecutar useMemo).

useCallback: Nos permite memorizar funciones, no solo variables. (Es parecido a UseMemo).
Sintaxis: const funcionConHook = useCallback(() => {//Funcion a ejecutar}, [pagina]);
// Primero se va a crear la funcion que solo queremos se ejecute cuando sea necesario. luego se le debe de poner "useCallback" antes de las llaves.
// Despues escribes lo que se va a ejecutar en la funcion.
// Por ultimo entre [] se pone lo que se actualice para poder actualizar esa funcion y renderizarla de nuevo.

useLayoutEffect: Es lo mismo que useEffect, la diferencia es que useLayoutEffect se ejecuta de manera asincrona.
Sintaxis: useEffect(() => { // Funciona igual que useEffect.
            Codigo a ejecutar.
          }, [Las veces que se va a ejecutar o cuando haya algun cambio en esa variable]);

useReducer:
Sintaxis:

useContext: Funciona para pasarle datos de un componente a otro. "Hacer un componente global."
Sintaxis: const variableContext = useContext(Componente_Context);
Componente Context: export const Componente_Context = createContext(null);

useld: Sirve para crearte IDs.
Sintaxis: const variable = useld();
